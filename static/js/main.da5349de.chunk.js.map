{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","components/Layout/Layout.js","components/Content/Content.js","helpers/miscellenous.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","Footer","Layout","children","Content","useState","data","setData","delimiter","numberOfLines","controls","setControls","controlsChangeHandler","event","updatedControls","target","id","value","style","width","padding","type","onChange","accept","files","FormData","append","console","log","fetch","method","body","then","response","json","entity","split","uploadFile","length","delimitedData","filter","item","indexOf","slice","map","index","key","trim","isEmpty","textAlign","getTableData","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.da5349de.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nconst Header = (props) => {\n    return (\n        <div className=\"header\">\n            <p>SymphonyAI</p>\n        </div>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport './Footer.css';\n\nconst Footer = (props) => {\n    return (\n        <div className=\"footer\">\n            <p>Copyright &copy; 2020 SymphonyAI</p>\n        </div>\n    );\n};\n\nexport default Footer;\n","import React from 'react';\nimport Header from '../Header/Header';\nimport Footer from '../Footer/Footer';\n\nconst Layout = (props) => {\n    return (\n        <div className=\"layout\">\n            <Header />\n            {props.children}\n            <Footer />\n        </div>\n    );\n};\n\nexport default Layout;\n","import React, { useState } from 'react';\nimport './Content.css';\nimport { isEmpty, isArrayNotEmpty } from '../../helpers/miscellenous';\n\nconst Content = (props) => {\n\n    const [data, setData] = useState([]);\n\n    const [controls, setControls] = useState({\n        delimiter: ',',\n        numberOfLines: '2'\n    });\n\n    const controlsChangeHandler = (event) => {\n        const updatedControls = { ...controls };\n        updatedControls[event.target.id] = event.target.value;\n        setControls(updatedControls);\n    };\n\n    const getTableData = () => {\n        const delimitedData = data.filter(item => item.indexOf(controls.delimiter) !== -1 && item.split(controls.delimiter))\n        if (isArrayNotEmpty(delimitedData)) {\n            return (\n                delimitedData.slice(0, controls.numberOfLines).map((item, index) => {\n                    return (\n                        <tr key={index}>\n                            {\n                                isEmpty(controls.delimiter) ?\n                                    <td key={index} style={{ textAlign: 'center' }}>{item}</td>\n                                    :\n                                    item.split(controls.delimiter).slice(0, 4).map(data => <td key={data}>{data}</td>)\n                            }\n                        </tr>\n                    );\n                })\n            );\n        } else {\n            return (\n                data.slice(0, controls.numberOfLines).map((item, index) => {\n                    return (\n                        <tr key={index}>\n                            <td key={index} style={{ textAlign: 'center' }}>{item}</td>\n                        </tr>\n                    );\n                })\n            );\n        }\n    };\n\n    const uploadFile = (event) => {\n        if (event.target.files[0]) {\n            const data = new FormData()\n            data.append('file', event.target.files[0]);\n            console.log('==event.target.files[0]==', event.target.files[0], data)\n            fetch('http://localhost:3000/upload-file', {\n                method: 'POST',\n                body: data\n            })\n                .then(response => {\n                    return response.json()\n                })\n                .then(body => {\n                    console.log('==body==', body.entity)\n                    setData(body.entity.split('\\n'));\n                });\n        }\n    };\n\n    return (\n        <div className=\"content\" style={{ width: '80%', padding: '10%' }}>\n            <div className=\"controls\">\n                <div className=\"delimiter\">\n                    <label>Delimiter</label>\n                    <input\n                        type=\"text\"\n                        id='delimiter'\n                        value={controls.delimiter}\n                        onChange={(event) => controlsChangeHandler(event)} />\n                </div>\n                <div className=\"lines\">\n                    <label>Lines</label>\n                    <input\n                        type=\"number\"\n                        id='numberOfLines'\n                        value={controls.numberOfLines}\n                        onChange={(event) => controlsChangeHandler(event)} />\n                </div>\n                <input\n                    type=\"file\"\n                    accept=\".txt, .csv, .pdf\"\n                    onChange={(event) => uploadFile(event)}\n                /><br />\n            </div><br />\n            <div className=\"total-lines\">Total {data.length} lines found</div>\n            <table>\n                <tbody>\n                    {getTableData()}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default Content;\n","\nexport const parseData = (data) => {\n    return JSON.parse(JSON.stringify(data));\n};\n\nexport const validateValues = (value) => {\n    var regex = /^[a-zA-Z0-9!@#$%^&*)(. _-]{0,16}$/;\n    return regex.test(value);\n};\n\nexport const isObjectEmpty = (obj) => {\n    return Object.keys(obj).length === 0;\n};\n\nexport const isEmpty = (item) => {\n    if (typeof item === 'number') {\n        return false;\n    }\n    return item.trim() === '';\n};\n\nexport const isArrayNotEmpty = (arr) => {\n    return arr.length > 0;\n};\n","import React from 'react';\nimport Layout from './components/Layout/Layout';\nimport Content from './components/Content/Content';\n\nconst App = (props) => {\n    return (\n        <div className=\"app\">\n            <Layout>\n                <Content />\n            </Layout>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}